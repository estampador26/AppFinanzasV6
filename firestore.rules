rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated and is the owner of the document.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // This rule is specifically for the collectionGroup query on 'contributions'.
    // It allows reading any contribution document across the database, as long as
    // the authenticated user's ID matches the 'userId' field within that document.
    match /{path=**}/contributions/{contributionId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Users can only read their own user document.
    // Creation/deletion is handled by Cloud Functions. Updates are not allowed from client.
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create, update, delete: if false;
    }

    // --- Rules for User Subcollections ---

    // This function validates that the document being created has the correct userId field.
    function hasCorrectUserId(userId) {
      return request.resource.data.userId == userId;
    }

    match /users/{userId}/transactions/{transactionId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if isOwner(userId) && hasCorrectUserId(userId);
    }
    
    match /users/{userId}/categories/{categoryId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if isOwner(userId) && hasCorrectUserId(userId);
    }
    
    match /users/{userId}/subscriptions/{subscriptionId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if isOwner(userId) && hasCorrectUserId(userId);
    }
    
    match /users/{userId}/loans/{loanId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if isOwner(userId) && hasCorrectUserId(userId);
    }
    
    match /users/{userId}/creditCards/{cardId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if isOwner(userId) && hasCorrectUserId(userId);
    }
    
    match /users/{userId}/financedPurchases/{purchaseId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if isOwner(userId) && hasCorrectUserId(userId);
    }
    
    match /users/{userId}/budgets/{budgetId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if isOwner(userId) && hasCorrectUserId(userId);
    }
    
    match /users/{userId}/savingsGoals/{goalId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if isOwner(userId) && hasCorrectUserId(userId);

      // This rule handles writes for contributions, ensuring ownership.
      // The collectionGroup rule above only handles reads.
      match /contributions/{contributionId} {
        allow create: if isOwner(userId) && hasCorrectUserId(userId);
        allow update, delete: if isOwner(userId);
      }
    }
  }
}